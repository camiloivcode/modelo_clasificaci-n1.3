import gradio as gr
import pandas as pd
import torch
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import json
from datetime import datetime

# ==================== 1. CARGAR MODELO ====================
model_path = "./modelo_clasificador_final"
tokenizer = AutoTokenizer.from_pretrained(model_path)
modelo = AutoModelForSequenceClassification.from_pretrained(model_path)

# Cargar configuraci√≥n
with open(f"{model_path}/config_categorias.json", "r", encoding="utf-8") as f:
    config = json.load(f)

categorias = config["categorias"]
precision_modelo = config.get("precision", 0.0)
fecha_entrenamiento = config.get("fecha_entrenamiento", "No disponible")

# ==================== 2. FUNCI√ìN DE CLASIFICACI√ìN ====================
def clasificar_comentario(texto):
    texto = texto.strip()
    if not texto:
        return "‚ö†Ô∏è Por favor ingresa un texto", 0.0, "N/A"

    inputs = tokenizer(texto, return_tensors="pt", truncation=True, padding=True)
    outputs = modelo(**inputs)
    prediccion = torch.argmax(outputs.logits, dim=1).item()
    confianza = torch.softmax(outputs.logits, dim=1)[0][prediccion].item()

    return categorias[prediccion], round(confianza * 100, 2), "Modelo BERT"

# ==================== 3. FUNCI√ìN PARA EXCEL ====================
def procesar_archivo_excel(archivo):
    try:
        df = pd.read_excel(archivo.name)
        if "Comentario" not in df.columns:
            return "‚ö†Ô∏è El archivo debe tener una columna llamada 'Comentario'.", None

        resultados = []
        for comentario in df["Comentario"]:
            categoria, confianza, metodo = clasificar_comentario(str(comentario))
            resultados.append({
                "Comentario": comentario,
                "Categor√≠a Predicha": categoria,
                "Confianza (%)": confianza,
                "M√©todo": metodo
            })
        df_resultados = pd.DataFrame(resultados)
        ruta_salida = "resultados_clasificados.xlsx"
        df_resultados.to_excel(ruta_salida, index=False)
        return "‚úÖ Clasificaci√≥n completada con √©xito.", ruta_salida
    except Exception as e:
        return f"‚ùå Error al procesar el archivo: {str(e)}", None

# ==================== 4. INTERFAZ GRADIO ====================
with gr.Blocks(title="üß† Clasificador Inteligente de Reportes Ciudadanos") as demo:
    gr.Markdown("""
    # üèôÔ∏è Clasificador Inteligente de Reportes Ciudadanos
    Esta aplicaci√≥n analiza los comentarios y reportes de los ciudadanos, clasific√°ndolos en categor√≠as como:
    **Salud**, **Educaci√≥n**, **Medio Ambiente** y **Seguridad**.
    ---
    """)

    with gr.Tab("üîç Clasificaci√≥n Individual"):
        texto_input = gr.Textbox(label="‚úèÔ∏è Ingresa un comentario", placeholder="Ejemplo: Las calles est√°n oscuras y es peligroso salir de noche.")
        btn_clasificar = gr.Button("üéØ Clasificar")
        categoria_output = gr.Textbox(label="Categor√≠a Detectada")
        confianza_output = gr.Number(label="Confianza (%)")
        metodo_output = gr.Textbox(label="M√©todo Usado")

    with gr.Tab("üìä Procesar Excel Masivo"):
        excel_input = gr.File(label="üìÅ Sube un archivo Excel con una columna 'Comentario'")
        btn_procesar = gr.Button("üöÄ Procesar Archivo")
        excel_output = gr.File(label="üìÇ Archivo Clasificado (Descargar)")
        mensaje_excel = gr.Textbox(label="Estado del proceso")

    with gr.Tab("‚ÑπÔ∏è Informaci√≥n del Sistema"):
        gr.Markdown(f"""
        ## üìä Detalles del Modelo
        
        ### üéì Entrenamiento
        - **Precisi√≥n:** {precision_modelo:.1%}
        - **Fecha:** {fecha_entrenamiento}
        - **Ubicaci√≥n:** `{model_path}`
        
        ### üè∑Ô∏è Categor√≠as Disponibles
        {chr(10).join([f'- **{cat}**' for cat in categorias])}
        
        ### üîß M√©todos de Clasificaci√≥n
        El sistema usa un enfoque **h√≠brido inteligente** que combina:
        
        1. **Detecci√≥n de frases espec√≠ficas** (95% confianza)  
           Ejemplo: *"calles oscuras"* ‚Üí Seguridad
        
        2. **An√°lisis de palabras clave** (90% confianza)  
           Busca palabras clave frecuentes en cada categor√≠a.
        
        3. **Modelo BERT**  
           Red neuronal entrenada con {config.get('registros_entrenamiento', 'N/A'):,} comentarios.
        
        4. **Combinaci√≥n adaptativa**  
           Ajusta la confianza seg√∫n coincidencias entre m√©todos.
        """)

    # ==================== 5. CONECTAR FUNCIONALIDADES ====================
    btn_clasificar.click(
        clasificar_comentario,
        inputs=texto_input,
        outputs=[categoria_output, confianza_output, metodo_output]
    )
    
    btn_procesar.click(
        procesar_archivo_excel,
        inputs=excel_input,
        outputs=[mensaje_excel, excel_output]
    )

# ==================== 6. EJECUTAR APLICACI√ìN ====================
if __name__ == "__main__":
    demo.launch()
